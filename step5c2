# STEP 5 C 2 plot same color for every 10-20 frames

# similar to 5C


path = "april2019/2019-02-27-12-19-36_Velodyne-HDL-32-Data-BF1-CL1-Cluster_csv"


arrayx = []

arrayy = []
# set tarray values as the frame number to track the evolution
tarray = []

# set if search nearby points
search2 = 0

# parameters of step 5
n = 50

firstrow=0

firstrowfirstfile= 0

obnum =0

previndices=[]

currentindices=[]

totalmap = {}

arrayofarrays = []

# rename current dict to totaldict?
currentdict = {}

arrayofdicts=[]

finalarray=[]

xvalues = []
yvalues = []

hxvalues =[]
hyvalues= []

prevmap={}

# initial cluster to track 
initialcluster = 2


# must intialize matchfreq
mf = defaultdict(list)

# maximum object/cluster id in any frame
mx = 11

for j in range(0, mx):
    mf[j]=0 

matchfreq= mf
# choose start frame
initialframe = 2

everyframe = 10 # every 10 frames

arrhxvalues=[]
arrhyvalues=[]

for i in range(initialframe, n):
    #print("i is ",i)
    name = "Cluster_Frame"
    name = name+str(i)
    name = name+".csv"
    #print(name)
    pathname = path+"/"+name
    
    firstrow=0
    
    row1 = 0
    # clear matchfreq
    for j in range(0, mx):
        matchfreq[j] =0
    with open(pathname) as csv_file:
        f= 0 #  max match freq compare
        currentmap= {}
        csv_reader = csv.reader(csv_file, delimiter=",")
        
        if i==initialframe:
            #print("i",i)
            for row in csv_reader:
                # skip label or first row
                if firstrowfirstfile==0:
                    firstrowfirstfile=1
                    continue
                clusterid = float(row[0])
                vehped = float(row[1])
                #print("clusterid", clusterid)
                if clusterid==initialcluster and vehped==1:
                    xpoint = float(row[2])
                    ypoint = float(row[3])
                    arrayx.append(xpoint)
                    arrayy.append(ypoint)
                    #print("xpoint", xpoint)
                    #print("ypoint", ypoint)
                    # change floor to round
                    xfloor = round(xpoint)
                    yfloor = round(ypoint)
                    fromi = invlookupdict[(xfloor,yfloor)]
                    h1, i1 = highestfreq(fromi)
                    prevmap[i1] = 1
                    
            plt.scatter(arrayx, arrayy)
            continue
        for row in csv_reader:
            row1 = row1+1
            if firstrow==0:
                firstrow=1
                continue
            
            vehped = float(row[1])
            
            if vehped == 2: 
                continue # only track vehicles
            clusterid = float(row[0])
            
            if clusterid != obnum:
                numo1 = float(obnum)
                # append into dictionary of maps
                totalmap[numo1] = currentmap
                if matchfreq[numo1] > f:
                    f = matchfreq[numo1]
                    print("f is", f)
                    ky = numo1
                    
                    hxvalues = xvalues
                    hyvalues = yvalues
                obnum = clusterid
                
                currentindices=[]
                currentmap= {}
                
                xvalues =[]
                yvalues =[]
                
                continue
            xpoint = float(row[2])
            ypoint = float(row[3])
            xr = round(xpoint)
            yr = round(ypoint)
            xvalues.append(xpoint) # save to array 
            yvalues.append(ypoint)
            fromi = invlookupdict[(xr,yr)]
            # function to find highest freq 
            h1, i1 = highestfreq(fromi)
            # save to indices
            currentindices.append(i1) 
            # save to map
            currentmap[i1] = 1
            # check prev map
            val = prevmap.get(i1)
            if val ==None:
                print("")
            else:
                numo = float(obnum)
                matchfreq[numo]= matchfreq[numo]+1
        
        finalarray.append(ky)
        #arrayx.extend(hxvalues)
        #arrayy.extend(hyvalues)
        #tarray.append(matchfreq[ky])
        
        #plt.scatter(hxvalues, hyvalues)
        # only plot every 10 frames -> append to arrhxvalues
        arrhxvalues.extend(hxvalues)
        arrhyvalues.extend(hyvalues)
        
        stepcounter = stepcounter+1
        
        if stepcounter == everyframe:
            plt.scatter(arrhxvalues, arrhyvalues)
            arrhxvalues=[]
            arrhyvalues=[]
            stepcounter = 1
        
        # set prevmap
        prevmap = totalmap[ky]

plt.show()
                
            

