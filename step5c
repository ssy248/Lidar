
path = "april2019/2019-02-27-12-19-36_Velodyne-HDL-32-Data-BF1-CL1-Cluster_csv"

from collections import defaultdict

import matplotlib.pyplot as plt


# step 5 C 
# change so that each new cluster is a new color 

# array to be plotted
arrayx = []

arrayy = []
# set tarray values as the frame number to track the evolution
tarray = []

# set if search nearby points
search2 = 0

# parameters of step 5
n = 9

firstrow=0

firstrowfirstfile= 0

obnum =0

previndices=[]

currentindices=[]

totalmap = {}

arrayofarrays = []

# rename current dict to totaldict?
currentdict = {}

arrayofdicts=[]

finalarray=[]

xvalues = []
yvalues = []

hxvalues =[]
hyvalues= []

prevmap={}

# initial cluster to track 
initialcluster = 2


# must intialize matchfreq
mf = defaultdict(list)

mx = 11

for j in range(0, mx):
    mf[j]=0 

matchfreq= mf

initialframe =2
    
for i in range(initialframe, n):
    print("i is ",i)
    name = "Cluster_Frame"
    name = name+str(i)
    name = name+".csv"
    print(name)
    pathname = path+"/"+name
    
    firstrow=0
    
    row1 = 0
    
    # clear matchfreq
    for j in range(0, mx):
        matchfreq[j] =0

    
    with open(pathname) as csv_file:
        
            
        f= 0 #  max matchfreq val
        
        #previndices = currentindices
        #currentindices =[] # set to empty

        currentmap= {}
            
        
        
        csv_reader = csv.reader(csv_file, delimiter=",")
        
        if i==initialframe:
            #print("i",i)
            for row in csv_reader:
                # skip label or first row
                if firstrowfirstfile==0:
                    firstrowfirstfile=1
                    continue
                clusterid = float(row[0])
                vehped = float(row[1])
                #print("clusterid", clusterid)
                if clusterid==initialcluster and vehped==1:
                    xpoint = float(row[2])
                    ypoint = float(row[3])
                    arrayx.append(xpoint)
                    arrayy.append(ypoint)
                    #print("xpoint", xpoint)
                    #print("ypoint", ypoint)
                    xfloor = math.floor(xpoint)
                    yfloor = math.floor(ypoint)
                    fromi = invlookupdict[(xfloor,yfloor)]
                    h1, i1 = highestfreq(fromi)
                    prevmap[i1] = 1 # save
                    #print('prevmap entry',i1)
            #skip
            # add to plt
            
            #plt.plot(arrayx, arrayy)
            plt.scatter(arrayx, arrayy)
        
            continue
            #break
                    
            
        for row in csv_reader:
            
            row1 = row1+ 1
            
            # must skip first row again
            if firstrow==0:
                firstrow=1
                continue
            
            vehped = float(row[1])
            
            if vehped == 2: 
                continue # only track vehicles
            
            clusterid = float(row[0]) # current cluster id 
            
            if clusterid==11:
                print("11 cluster row", row1)
                print("11 cluster row vp", vehped)
                
            
            if clusterid != obnum:
                   
                
                numo1 = float(obnum)
                
                # append to dictionary
                #currentdict[obnum] = currentindices 
                
                # append to dictionary of maps
                totalmap[numo1] = currentmap
                
                if obnum==11:
                    print("11 row", row1)
                    print("11 row vehped",vehped)
                
                print("obnum is", obnum)
                # append to highest 
                # check if exists 
                #print("mval", matchfreq[obnum])
                #mval = matchfreq[obnum] #if mval != None:
                
                
                
                if matchfreq[numo1] > f:
                    f = matchfreq[numo1]
                    print("f is", f)
                    ky = numo1
                    hxvalues = xvalues
                    hyvalues = yvalues 
                    # make the prevmap the current map
                    
                        # append to total map 
                    
                
                # new comparisons 
                obnum = clusterid
                
                currentindices=[]
                currentmap= {}
                
                xvalues =[]
                yvalues =[]
                
                continue
            #clustertype = row[1]
            xpoint = float(row[2])
            ypoint = float(row[3])
            # add to 
            #print(xpoint)
            xfloor = math.floor(xpoint)
            yfloor = math.floor(ypoint)
            xvalues.append(xpoint) # save to array 
            yvalues.append(ypoint)
            fromi = invlookupdict[(xfloor,yfloor)]
            # function to find highest freq 
            h1, i1 = highestfreq(fromi)
            # save to indices
            currentindices.append(i1) 
            # save to map
            currentmap[i1] = 1
            # now check the previndices
            #see if they match 
            # use map key and value pair 
            # find fromi in previndices
            val = prevmap.get(i1)
            #print("val is", val)
            if val ==None:
                #print("val none")
                # method 2: search nearby points 
                if search2 ==1:
                    ipt = lookupdict[i1]
                    iptx= ipt[0]
                    ipty = ipt[1]
                    for ix in range(-5, 5):
                        for iy in range(-5, 5):
                            nearpt = (iptx+ ix, ipty + iy)
                            # check if is in prevmap
                            inear = invlookupdict[nearpt]
                            valnear = prevmap.get(inear)
                            if valnear != None:
                                # add to matchfreq 
                                valm = matchfreq[obnum]
                                if valm==None:
                                    matchfreq[obnum]=0.1 # lesser value added 
                                else:
                                    matchfreq[obnum]= matchfreq[obnum]+0.1
            else:
                # add to freq
                # check if matchfreq[obnum] exists
                #val1 = matchfreq[obnum]
                #print("add to matchfreq")
                numo = float(obnum)
                #print("numo", numo)
                matchfreq[numo]= matchfreq[numo]+1
            
                
        # add index to final index set 
        print("highest index,",ky)
        print("value of freq,",matchfreq[ky])
        finalarray.append(ky)
        # append the points to the set of pts to be plotted ; use extend function
        #arrayx.extend(hxvalues)
        #arrayy.extend(hyvalues)
        #tarray.append(matchfreq[ky])
        
        #plt.plot(hxvalues, hyvalues)
        plt.scatter(hxvalues, hyvalues)
        
        # set prevmap to the one 
        prevmap = totalmap[ky]
        
plt.legend(['file1', 'file2', 'file3', 'file4', 'file5', 'file6', 'file7', 'file8'], loc='upper left')
plt.show()


